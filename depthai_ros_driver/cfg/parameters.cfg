# Forearm camera configuration

PACKAGE='depthai_ros_driver'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
camera = gen.add_group("camera")
#       Name                    Type      Reconfiguration level
#       Description
#       Default  Min  Max

camera.add("camera_i_enable_ir",  bool_t, 0, "Enabling IR", True)
camera.add("camera_i_floodlight_brightness", double_t, 0, "Floodlight brightness", 0, 0, 1500)
camera.add("camera_i_laser_dot_brightness", double_t, 0,"Laser dot brightness", 800, 0, 1200)
camera.add("left_r_keep_preview_aspect_ratio", bool_t, 0, "Keep preview aspect ratio", True)
camera.add("left_r_exposure", int_t, 0, "Sensor exposure", 1000, 1, 33000)
camera.add("left_r_focus", int_t, 0, "Focus", 1, 0, 255)
camera.add("left_r_iso", int_t, 0, "Sensor iso", 800, 100, 1600)
camera.add("left_r_set_man_exposure", bool_t, 0, "Enable manual exposure", False)
camera.add("left_r_set_man_focus", bool_t, 0, "Enable manual focus", False)
camera.add("left_r_set_man_whitebalance", bool_t, 0, "Enable manual whitebalance", False)
camera.add("left_r_whitebalance", int_t, 0, "Whitebalance", 3300, 1000, 12000)
camera.add("left_r_set_auto_exposure_limit", bool_t, 0, "Enable auto exposure limit", False)
camera.add("left_r_auto_exposure_limit", int_t, 0, "Auto exposure limit", 1000, 1, 33000)
camera.add("left_r_set_sharpness", bool_t, 0, "Enable sharpness", False)
camera.add("left_r_sharpness", int_t, 0, "Sharpness", 0, 0, 4)
camera.add("left_r_set_chroma_denoise", bool_t, 0, "Enable chroma denoise", False)
camera.add("left_r_chroma_denoise", int_t, 0, "Chroma denoise", 0, 0, 4)
camera.add("left_r_set_luma_denoise", bool_t, 0, "Enable luma denoise", False)
camera.add("left_r_luma_denoise", int_t, 0, "Luma denoise", 0, 0, 4)

camera.add("right_r_keep_preview_aspect_ratio", bool_t, 0, "Keep preview aspect ratio", True)
camera.add("right_r_exposure", int_t, 0, "Sensor exposure", 1000, 1, 33000)
camera.add("right_r_focus", int_t, 0, "Focus", 1, 0, 255)
camera.add("right_r_iso", int_t, 0, "Sensor iso", 800, 100, 1600)
camera.add("right_r_set_man_exposure", bool_t, 0, "Enable manual exposure", False)
camera.add("right_r_set_man_focus", bool_t, 0, "Enable manual focus", False)
camera.add("right_r_set_man_whitebalance", bool_t, 0, "Enable manual whitebalance", False)
camera.add("right_r_whitebalance", int_t, 0, "Whitebalance", 3300, 1000, 12000)
camera.add("right_r_set_auto_exposure_limit", bool_t, 0, "Enable auto exposure limit", False)
camera.add("right_r_auto_exposure_limit", int_t, 0, "Auto exposure limit", 1000, 1, 33000)
camera.add("right_r_set_sharpness", bool_t, 0, "Enable sharpness", False)
camera.add("right_r_sharpness", int_t, 0, "Sharpness", 0, 0, 4)
camera.add("right_r_set_chroma_denoise", bool_t, 0, "Enable chroma denoise", False)
camera.add("right_r_chroma_denoise", int_t, 0, "Chroma denoise", 0, 0, 4)
camera.add("right_r_set_luma_denoise", bool_t, 0, "Enable luma denoise", False)
camera.add("right_r_luma_denoise", int_t, 0, "Luma denoise", 0, 0, 4)

camera.add("rgb_r_keep_preview_aspect_ratio", bool_t, 0, "Keep preview aspect ratio", True)
camera.add("rgb_r_exposure", int_t, 0, "Sensor exposure", 1000, 1, 33000)
camera.add("rgb_r_focus", int_t, 0, "Focus", 1, 0, 255)
camera.add("rgb_r_iso", int_t, 0, "Sensor iso", 800, 100, 1600)
camera.add("rgb_r_set_man_exposure", bool_t, 0, "Enable manual exposure", False)
camera.add("rgb_r_set_man_focus", bool_t, 0, "Enable manual focus", False)
camera.add("rgb_r_set_man_whitebalance", bool_t, 0, "Enable manual whitebalance", False)
camera.add("rgb_r_whitebalance", int_t, 0, "Whitebalance", 3300, 1000, 12000)
camera.add("rgb_r_set_auto_exposure_limit", bool_t, 0, "Enable auto exposure limit", False)
camera.add("rgb_r_auto_exposure_limit", int_t, 0, "Auto exposure limit", 1000, 1, 33000)
camera.add("rgb_r_set_sharpness", bool_t, 0, "Enable sharpness", False)
camera.add("rgb_r_sharpness", int_t, 0, "Sharpness", 0, 0, 4)
camera.add("rgb_r_set_chroma_denoise", bool_t, 0, "Enable chroma denoise", False)
camera.add("rgb_r_chroma_denoise", int_t, 0, "Chroma denoise", 0, 0, 4)
camera.add("rgb_r_set_luma_denoise", bool_t, 0, "Enable luma denoise", False)
camera.add("rgb_r_luma_denoise", int_t, 0, "Luma denoise", 0, 0, 4)

exit(gen.generate(PACKAGE, "depthai_ros_driver", "parameters"))
